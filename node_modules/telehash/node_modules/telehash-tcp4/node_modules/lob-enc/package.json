{
  "name": "lob-enc",
  "version": "0.0.16",
  "description": "Length-Object-Binary Packet Encoding",
  "dependencies": {
    "chacha20": "~0.1.2"
  },
  "devDependencies": {
    "chai": "*",
    "event-stream": "~3.1.7",
    "mocha": "*"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/telehash/lob-enc.git"
  },
  "keywords": [
    "lob encoding",
    "packet",
    "json",
    "binary"
  ],
  "author": {
    "name": "Jeremie Miller",
    "email": "jeremie@jabber.org",
    "url": "http://jeremie.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/telehash/lob-enc/issues"
  },
  "homepage": "https://github.com/telehash/lob-enc",
  "readme": "# Length-Object-Binary (LOB) Packet Encoding (javascript)\n\nThis module will encode and decode [LOB](https://github.com/telehash/telehash.org/tree/master/v3/lob) packets to/from JSON and Buffers.\n\nInstall: `npm install lob-enc`\n\nPrimary usage:\n\n```js\nvar lob = require('lob-enc');\nvar json = {\n  \"type\":\"test\",\n  \"foo\":[\"bar\"]\n};\nvar body = new Buffer(\"any binary!\");\nvar bin = lob.encode(json, body));\n// bin will be a buffer with json and body encoded\n\nvar packet = lob.decode(bin);\n// packet.json == json, and packet.body == body\n\n// do both encode and decode together, for convenience\nvar packet = lob.packet(json, body);\n\n// object validator\nvar bool = lob.isPacket(packet);\n```\n\nAlso supports reading a packet in a [streaming mode](https://github.com/telehash/telehash.org/blob/master/v3/channels/thtp.md#thtp-channel):\n\n````js\nvar stream = lob.stream(function(packet, cbDone){\n  // packet.json is the complete header\n  // any packet.body will be subsequently streamed\n  cbDone();\n});\n\nvar es = require('event-stream');\nstream.pipe(es.wait(function(err, body){\n  // body is the body of the packet\n}));\n\n// test stream in fragments\nvar bin = new Buffer('001d7b2274797065223a2274657374222c22666f6f223a5b22626172225d7d616e792062696e61727921','hex');\nes.readArray([bin.slice(0,10),bin.slice(10,20),bin.slice(20,30),bin.slice(30)]).pipe(stream);\n````\n\nPackets can be read and written in [chunks](https://github.com/telehash/telehash.org/blob/master/v3/lob/chunking.md):\n\n````js\n// args.ack = true will only send one chunk until another is read, blocking/acking\nvar chunk = lob.chunking(args, function cbPacket(err, packet){ });\n\nchunk.pipe(socket); // chunks are written to socket\nsocket.pipe(chunk); // incoming socket data is read back as chunks\n\nchunk.send(packet); // send a packet as one or more chunks\n````\n\nPackets can be [cloaked](https://github.com/telehash/telehash.org/blob/master/v3/cloaking.md):\n\n````js\nvar cloaked = lob.cloak(packet);\nvar packet = lob.decloak(cloaked);\n// packet.cloaked = # of rounds\n````\n",
  "readmeFilename": "README.md",
  "_id": "lob-enc@0.0.16",
  "_shasum": "3099542f2001df534a50da7b849af1d60eb59e0b",
  "_resolved": "git+https://github.com/quartzjer/lob-enc.git#e559052ca78ce8ff3fa63bccf5a3c263da34df69",
  "_from": "lob-enc@git+https://github.com/quartzjer/lob-enc.git"
}
