{
  "name": "e3x",
  "description": "End-to-End Encrypted eXchange",
  "homepage": "https://github.com/telehash/e3x-js",
  "version": "0.1.18",
  "dependencies": {
    "lob-enc": "git+https://github.com/telehash/lob-enc.git",
    "hashname": "git+https://github.com/telehash/hashname.git",
    "e3x-cs1a": "git+https://github.com/quartzjer/e3x-cs1a.git",
    "e3x-cs3a": "git+https://github.com/quartzjer/e3x-cs3a.git"
  },
  "devDependencies": {
    "chai": "*",
    "mocha": "*"
  },
  "scripts": {
    "test": "make test"
  },
  "keywords": [
    "e3x",
    "e2e",
    "end-to-end",
    "encryption",
    "crypto",
    "p2p",
    "mesh",
    "browser"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/telehash/e3x-js.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/telehash/e3x-js/raw/master/LICENSE"
    }
  ],
  "author": {
    "name": "Jeremie Miller",
    "email": "jeremie@jabber.org",
    "url": "http://jeremie.com/"
  },
  "readme": "e3x: End-to-End Encrypted eXchange (javascript)\n===============================================\n\n[![Build Status](https://travis-ci.org/telehash/e3x-js.svg?branch=master)](https://travis-ci.org/telehash/e3x-js)\n\nThis module implements all of [e3x](https://github.com/telehash/telehash.org/tree/master/v3/e3x) in javascript as a node and browserify module.  It is used by [telehash-js](https://github.com/telehash/telehash-js) which is designed to provide a friendly higher level api, whereas this is low level and expects the application to manage all state tracking.\n\n## Usage\n\nAll packets use [lob-enc](https://github.com/telehash/lob-enc) structure of: `{json:{...}, body:Buffer(...)}`\n\n```js\nvar e3x = require('e3x');\n\nvar secrets = e3x.generate();\n\nvar self = e3x.self(args);\nif(!self) console.log(e3x.err);\n\nvar inner = self.decrypt(message);\n  \nvar exchange = self.exchange(args);\nif(!exchange) console.log(self.err);\n\nexchange.token; // 16 byte buffer\nexchange.sending = function(packet){ }\n\nvar bool = exchange.verify(message);\nvar message = exchange.encrypt(inner);\n\nvar inner = exchange.receive(cpacket);\n\nvar at = exchange.at(at); // set the at, or return the current one if none given, will start to timeout channels until in sync\nvar bool = exchange.sync(handshake); // processes handshake to do all setup stuff, resends channels if in sync\nvar handshake = exchange.handshake(); // returns current handshake to be sent\n\nvar channel = exchange.channel(open);\nif(!channel) console.log(exchange.err);\n\nvar bool = channel.receive(inner); // true if accepted\nchannel.send(packet); // calls exchange.sending()\nchannel.state;\nchannel.receiving = function(err, packet){};\n\n```\n\n## Cipher Sets\n\nThese are the current [Cipher Sets](https://github.com/telehash/telehash.org/tree/master/v3/e3x/cs) supported by default:\n\n* [cs1a](https://github.com/quartzjer/e3x-cs1a) - node, browser\n* [cs2a](https://github.com/quartzjer/telehash-cs2a) - node, browser\n* [cs3a](https://github.com/quartzjer/telehash-cs3a) - node\n\nThe API to implement a new CS module is just a simplified crypto wrapper:\n\n```js\nvar cs = require('e3x-csxx');\ncs.id; // 'xx';\n\ncs.generate(cb); // new local keypair, cb(err, pair)\n\nvar local = new cs.Local(pair);\nvar inner = local.decrypt(body);\n\nvar remote = new cs.Remote(public_key_endpoint);\nvar bool = remote.verify(local, body);\nvar outer = remote.encrypt(local, inner);\n\nvar ephemeral = new cs.Ephemeral(remote, body);\nvar outer = ephemeral.encrypt(inner)\nvar inner = ephemeral.decrypt(outer)\n\n\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/telehash/e3x-js/issues"
  },
  "_id": "e3x@0.1.18",
  "_shasum": "8fe120cd1f78d4141127a3bdaf5ac6905113304a",
  "_resolved": "git+https://github.com/telehash/e3x-js.git#74b2a7d52859048dc9c0ed1beb3c4daacd549ac5",
  "_from": "e3x@git+https://github.com/telehash/e3x-js.git"
}
