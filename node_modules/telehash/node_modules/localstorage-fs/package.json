{
  "name": "localstorage-fs",
  "version": "0.1.0",
  "description": "node's fs module for the browser backed by localStorage",
  "dependencies": {
    "process": "~0.5.1",
    "fs-stats": "~0.0.0",
    "inherits": "~2.0.1"
  },
  "devDependencies": {
    "tape": "2.3.2"
  },
  "scripts": {
    "example": "browserify example/index.js > example/bundle.js && { [ -x \"$(which open)\" ] && open example/index.html || xdg-open example/index.html; }",
    "test": "browserify test/index.js > test/bundle.js && { [ -x \"$(which open)\" ] && open test/index.html || xdg-open test/index.html; }"
  },
  "testling": {
    "files": "test/index.js",
    "browsers": [
      "ie/8",
      "ie/9",
      "ie/10",
      "ie/latest",
      "chrome/15",
      "chrome/latest",
      "firefox/10",
      "firefox/latest",
      "safari/latest",
      "opera/latest"
    ]
  },
  "author": {
    "name": "Jesse Tane",
    "email": "jesse.tane@gmail.com"
  },
  "license": "WTFPL",
  "readme": "# localstorage-fs\nnode's [`fs`](http://nodejs.org/api/fs.html) module backed by [`localStorage`](http://www.w3.org/TR/webstorage/#the-localstorage-attribute)\n\n[![Browser Support](http://ci.testling.com/jessetane/localstorage-fs.png)](http://ci.testling.com/jessetane/localstorage-fs)\n\n## why\n[this](https://github.com/juliangruber/level-fs-browser) would be way better, but i needed the sync methods\n\n## how\nbrowserify and use like you would in node land\n\n## api coverage\n* `fs.rename(oldPath, newPath, callback)`\n* `fs.renameSync(oldPath, newPath)`\n* `fs.truncate(path, len, callback)`\n* `fs.truncateSync(path, len)`\n* `fs.chmod(path, mode, callback)`\n* `fs.chmodSync(path, mode)`\n* `fs.stat(path, callback)`\n* `fs.statSync(path)`\n* `fs.unlink(path, callback)`\n* `fs.unlinkSync(path)`\n* `fs.rmdir(path, callback)`\n* `fs.rmdirSync(path)`\n* `fs.mkdir(path, callback)`\n* `fs.mkdirSync(path, mode)`\n* `fs.readdir(path, callback)`\n* `fs.readdirSync(path)`\n* `fs.readFile(path, options, callback)`\n* `fs.readFileSync(path, options)`\n* `fs.writeFile(path, data, options, callback)`\n* `fs.writeFileSync(path, data, options)`\n* `fs.appendFile(path, data, options, callback)`\n* `fs.appendFileSync(path, data, options)`\n* `fs.exists(path, callback)`\n* `fs.existsSync(path)`\n* `fs.createWriteStream(path, options)`\n* `fs.createReadStream(path, options)`\n\nothers that could probably be implemented [here](https://github.com/jessetane/localstorage-fs/blob/master/index.js#L235)\n\n## tests / example\n* get browserify\n* get bash\n* `npm run test`\n* `npm run example`\n\n## implementation\n* file data and directory listings are keyed by `'/path/name'` under the prefix: `'file://'`\n* meta data (also keyed by path name) is stored as JSON stringified `fs.Stats` instances under `'file-meta://'`\n* file contents are stored as base64 encoded strings which means binary files work\n* directory listings are stored as newline delimited plain strings (like `ls(1)`)\n* async methods are faked with `process.nextTick`\n* streams are faked by buffering into memory\n\n## notes\n* some `fs` related [`process`](https://github.com/jessetane/localstorage-fs/blob/master/index.js#L547) methods are shimmed out by this module for now\n\n## license\nWTFPL",
  "readmeFilename": "readme.md",
  "_id": "localstorage-fs@0.1.0",
  "dist": {
    "shasum": "0daa13aad97333992b6e87dfd47ce84b28aad302",
    "tarball": "http://registry.npmjs.org/localstorage-fs/-/localstorage-fs-0.1.0.tgz"
  },
  "_from": "localstorage-fs@~0.1.0",
  "_npmVersion": "1.3.15",
  "_npmUser": {
    "name": "jessetane",
    "email": "jesse.tane@gmail.com"
  },
  "maintainers": [
    {
      "name": "jessetane",
      "email": "jesse.tane@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "0daa13aad97333992b6e87dfd47ce84b28aad302",
  "_resolved": "https://registry.npmjs.org/localstorage-fs/-/localstorage-fs-0.1.0.tgz"
}
