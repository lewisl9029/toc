var sodium = require('./lib/sodium').api;
var message = new Buffer(200);
var key = new Buffer(sodium.crypto_auth_KEYBYTES);

// fill message with random data
sodium.randombytes(message);

// generate a random secret key
sodium.randombytes(key);

var token = sodium.crypto_auth(message, key);
var r = sodium.crypto_auth_verify(token, message, key);
if( r != 0) {
	console.log("message authentication failed");
}
else {
	console.log("message authenticated");
}
console.log(sodium.crypto_auth_PRIMITIVE);

var message = new Buffer(200);
var key = new Buffer(sodium.crypto_auth_KEYBYTES);

// fill message with random data
sodium.randombytes(message);

// generate a random secret key
sodium.randombytes(key);

var token = sodium.crypto_onetimeauth(message, key);
var r = sodium.crypto_onetimeauth_verify(token, message, key);
if( r != 0) {
	console.log("message authentication failed");
}
else {
	console.log("message authenticated");
}
console.log(sodium.crypto_onetimeauth_PRIMITIVE);

var key = new Buffer(sodium.crypto_stream_KEYBYTES);
var nonce = new Buffer(sodium.crypto_stream_NONCEBYTES);
sodium.randombytes(key);
sodium.randombytes(nonce);
var r = sodium.crypto_stream(1000,nonce,key);
if( !r ) {
    throw('bad stream');
}
console.log(sodium.crypto_stream_PRIMITIVE);

console.log("stream_xor");

var plainMsg = new Buffer("This is my plain text","utf-8");
var key = new Buffer(sodium.crypto_stream_KEYBYTES);
var nonce = new Buffer(sodium.crypto_stream_NONCEBYTES);

sodium.randombytes(key);
sodium.randombytes(nonce);

var cipherMsg = sodium.crypto_stream_xor(plainMsg,nonce,key);
if( !cipherMsg ) {
    throw("error");
}
console.log(cipherMsg);
var plainMsg2 = sodium.crypto_stream_xor(cipherMsg,nonce,key);
if( !plainMsg2 ) {
    throw("error");
}
console.log(plainMsg.toString());

console.log("secretbox");
var plainMsg = new Buffer("This is my plain text","utf-8");
var key = new Buffer(sodium.crypto_secretbox_KEYBYTES);
var nonce = new Buffer(sodium.crypto_secretbox_NONCEBYTES);
sodium.randombytes(key);
sodium.randombytes(nonce);

var cipherMsg = sodium.crypto_secretbox(plainMsg,nonce,key);
if( !cipherMsg ) {
    throw("error");
}
console.log(cipherMsg);
var plainMsg2 = sodium.crypto_secretbox_open(cipherMsg,nonce,key);
if( !plainMsg2 ) {
    throw("error");
}
console.log(plainMsg2.toString());

console.log(sodium.crypto_secretbox_PRIMITIVE);

console.log("-->box");
var plainMsg = new Buffer("This is my plain text","utf-8");

// Generate new random public and secret keys for Bob and Alice
var bobKeys = sodium.crypto_box_keypair();
var aliceKeys = sodium.crypto_box_keypair();

// Generate a new nonce
var nonce = new Buffer(sodium.crypto_box_NONCEBYTES);
sodium.randombytes(nonce);

// Bob wants to send an encrypted message to Alice
var cipherMsg = sodium.crypto_box(plainMsg,nonce,aliceKeys.publicKey, bobKeys.secretKey);
if( !cipherMsg ) {
    throw("error");
}
console.log(cipherMsg);

// Alice wants to decrypt Bob's message
var plainMsg2 = sodium.crypto_box_open(cipherMsg,nonce, bobKeys.publicKey, aliceKeys.secretKey);
if( !plainMsg2 ) {
    throw("error");
}
console.log(plainMsg2.toString());

console.log(sodium.crypto_box_PRIMITIVE);

console.log("-->box_beforenm");
var plainMsgs = new Array(3);
plainMsgs[0] = new Buffer("This is my plain text 1","utf-8");
plainMsgs[1] = new Buffer("This is my plain text 2","utf-8");
plainMsgs[2] = new Buffer("This is my plain text 3","utf-8");

// Generate new random public and secret keys for Bob and Alice
var bobKeys = sodium.crypto_box_keypair();
var aliceKeys = sodium.crypto_box_keypair();

// Generate a new nonce
var nonce = new Buffer(sodium.crypto_box_NONCEBYTES);
sodium.randombytes(nonce);

// Bob's side
// Bob wants to send several messages to Alice, so he precomputes the first
// step of the encryption using Alice's public key and his own secret key
var bobPreCompK = sodium.crypto_box_beforenm(aliceKeys.publicKey, bobKeys.secretKey);

var cipherMsgs = new Array(3);
for (var i=0; i < plainMsgs.length; i++) {
	cipherMsgs[i] = sodium.crypto_box_afternm(plainMsgs[i],nonce, bobPreCompK);
	if( !cipherMsgs[i] ) {
		throw("error");
	}
}

// Alice's Side
// Alice wants to decrypt several messages from Bob, so she precomputes the first
// step using Bob's public key and her own secret key
var alicePreCompK = sodium.crypto_box_beforenm(bobKeys.publicKey, aliceKeys.secretKey);

var plainMsgs2 = new Array(3);
for (var i=0; i < cipherMsgs.length; i++) {
	plainMsgs2[i] = sodium.crypto_box_open_afternm(cipherMsgs[i], nonce, alicePreCompK);
	if( !cipherMsgs[i] ) {
		throw("error");
	}
	console.log(plainMsgs2[i].toString());
}


console.log("-->sign");
var keys = sodium.crypto_sign_keypair();
var message = new Buffer("node-sodium is cool", 'utf8');
var signedMsg = sodium.crypto_sign(message, keys.secretKey);
if( sodium.crypto_sign_open(signedMsg, keys.publicKey) ) {	
	console.log("signature is valid");
}


console.log('scalarmult');
var p = new Buffer(sodium.crypto_scalarmult_BYTES);
var n = new Buffer(sodium.crypto_scalarmult_SCALARBYTES);

sodium.randombytes(p);
sodium.randombytes(n);

var r = sodium.crypto_scalarmult(n,p);
console.log(r);

console.log('scalarmult_base');
var r = sodium.crypto_scalarmult_base(n);
console.log(r);
